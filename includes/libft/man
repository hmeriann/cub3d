void ft_bzero(void *s, size_t n);
Функция bzero устанавливает первые n байт области, начинающейся с s, в ноль (байты, содержащие '\0').

void *ft_memset(void *b, int c, size_t len);
Функция memset заполняет первые len байт области памяти, на которую указывает аргумент b, символом, код которого указывается аргументом c.

void *ft_memcpy(void *dst, const void *src, size_t n);
Функция memcpy копирует n байт из массива (области памяти), на который указывает аргумент src, в массив (область памяти), на который указывает аргумент dst. Если массивы перекрываются, результат копирования будет не определен."

void *ft_memccpy(void *dst, const void *src, int c, size_t n);
Функция memcpy копирует данные из массива (области памяти), на который указывает аргумент src, в массив (область памяти), на который указывает аргумент dst пока не встретится символ, код которого соответствует указанному в аргументе c или пока не будет скопировано n байт данных."

void *ft_memmove(void *dst, const void *src, size_t len);
Функция memmove копирует n байт из массива (области памяти), на который указывает аргумент src, в массив (область памяти), на который указывает аргумент dst. При этом массивы (области памяти) могут пересекаться."

void *ft_memchr(const void *s, int c, size_t n);
Функция memchr ищет вхождение в массив (область памяти) символа, код которого задан аргументом c, сравнивая каждый байт массива (области памяти) определенный как unsigned char с кодом искомого символа. Если искомый символ найден, то возвращается адрес найденного символа и сравнение завершается. Если, после проверки n байтов, искомый символ не найден, то сравнение прекращается и функция возвращает NULL."

int ft_memcmp(const void *s1, const void *s2, size_t n);
Функция memcmp побайтно сравнивает два массива (области памяти), на которые указывают аргументы s1 и s2. Каждый байт массива определяется типом unsigned char. Сравнение продолжается, пока не будут проверено n байт или пока не встретятся отличающиеся байты."

void *ft_memalloc(size_t size);
Функция ft_memalloc выделяет (с помощью malloc) и возвращает «свежую» область памяти. Выделенная память инициализируется в 0. Если распределение не удается, функция возвращает NULL."

void ft_memdel(void **ap);
Функция ft_memdel принимает в качестве параметра адрес области памяти, которую нужно освободить с помощью free, затем устанавливает указатель на NULL."

size_t ft_strlen(const char *s);
Функция strlen вычисляет количество символов в строке до первого вхождения символа конца строки. При этом символ конца строки не входит в подсчитанное количество символов."

char *ft_strdup(const char *s1);
Функция strdup дублирует строку, на которую указывает аргумент s1. Память под дубликат строки выделяется с помощью функции malloc, и по окончанию работы с дубликатом должна быть очищена с помощью функции free."

char *ft_strcpy(char *dst, const char *src);
Функция strcpy копирует данные из строки, на которую указывает аргумент src, в строку, на которую указывает аргумент dst, пока не встретится символ конца строки (нулевой символ). Копирование производится вместе с символом конца строки. Если строки перекрываются, результат копирования будет не определен."

char *ft_strncpy(char *dst, const char *src, size_t len);
Функция strncpy копирует данные из строки, на которую указывает аргумент src, в строку на который указывает аргумент dst, пока не встретится символ конца строки (нулевой символ) или количество скопированных символов не достигнет величины указанной в аргументе n. При этом символ конца строки не копируется. Если в аргументе n указана величина большая, чем длинна строки, т.е. символ конца строки '\0' встретился раньше, чем было скопировано n символов, то в массив, на который указывает аргумент dst, дозаписывается столько нулевых символов, чтобы общая длина записанной строки достигла величины указанной в аргументе n. Если строки перекрываются, результат копирования будет не определен."

char *ft_strcat(char *s1, const char *s2);
Функция strcat добавляет в строку, на которую указывает аргумент s1, строку, на которую указывает аргумент s2. Символ конца строки помещается в конце объединенных строк. Если строки перекрываются, результат объединения будет не определен."

char *ft_strncat(char *s1, const char *s2, size_t n);
Функция strncat добавляет в строку, на которую указывает аргумент s1, строку, на которую указывает аргумент s2, пока не встретится символ конца строки или пока не будет добавлено n символов. Символ конца строки помещается в конце объединенных строк. Если строки перекрываются, результат объединения будет не определен."

size_t ft_strlcat(char *dst, const char *src, size_t size);
Функция strlcat добавляет в строку, на которую указывает аргумент s1, строку, на которую указывает аргумент s2, пока не встретится символ конца строки или пока не будет добавлено n символов. В отличие от других функций, strlcat принимает полный размер буфера и гарантирует наличие терминального символа у результата. Для корректной работы функции strlcat, ей необходимо передавать только нультерминальные строки."

char *ft_strchr(const char *s, int c);
Функция strchr ищет первое вхождения символа, код которого указан в аргументе c, в строке, на которую указывает аргумент s."

char *ft_strrchr(const char *s, int c);
Функция strrchr ищет последнее вхождения символа, код которого указан в аргументе c, в строке, на которую указывает аргумент s."

char *ft_strstr(const char *haystack, const char *needle);
Функция strstr ищет первое вхождение строки (за исключением признак конца строки), на которую указывает аргумент needle, в строку , на которую указывает аргумент haystack. Если строка needle имеет нулевую длину, то функция вернет указатель на начало строки haystack."

char *ft_strnstr(const char *haystack, const char *needle, size_t len);
Функция strnstr ищет первое вхождение len символов строки (за исключением признак конца строки), на которую указывает аргумент needle, в строку , на которую указывает аргумент haystack. Если строка needle имеет нулевую длину, то функция вернет указатель на начало строки haystack."

int ft_strcmp(const char *s1, const char *s2);
Функция strcmp побайтно сравнивает коды символов двух строк, на которые указывают аргументы функции. Сравнение продолжается до встречи первого отличающегося символа или пока не будут проверены все символы строк. Если все символы строк совпали, то возвращается 0. Если при сравнении встретились отличающиеся символы, то сравнение прекращается и возвращается отрицательное или положительное число, в зависимости от того больше или меньше код символа строки s1, кода символа строки s2 на той же позиции (Положительное число – если строки отличаются и код первого отличающегося символа в строке s1 больше кода символа на той же позиции в строке s2. Отрицательное число – если строки отличаются и код первого отличающегося символа в строке s1 меньше кода символа на той же позиции в строке s2.). Если строки разной длины, то возвращается положительное число, если строка s1 длиннее строки s2, или отрицательное число, если строка s2 длиннее строки s1."

int ft_strncmp(const char *s1, const char *s2, size_t n);
Функция strncmp побайтно сравнивает коды символов двух строк, на которые указывают аргументы функции. Сравнение прекращается если встретились отличающиеся символы. При этом возвращается отрицательное или положительное число (Положительное число – если строки отличаются и код первого отличающегося символа в строке s1 больше кода символа на той же позиции в строке s2. Отрицательное число – если строки отличаются и код первого отличающегося символа в строке s1 меньше кода символа на той же позиции в строке s2.). Если были проверены n символов или обе сравниваемые строки закончились, и отличий не было, то сравнение прекращается и возвращается ноль."

char *ft_strnew(size_t size);
Функция ft_strnew выделяет (с помощью malloc) и возвращает «свежую» строку, заканчивающуюся на \0. Каждый символ строки инициализируется в \0. Если распределение завершается неудачно, функция возвращает NULL."

void ft_strdel(char **as);
Функция ft_strdel принимает в качестве параметра адрес строки, которую необходимо освободить с помощью free, затем устанавливает ее указатель в NULL."

void ft_strclr(char *s);
Функция ft_strclr устанавливает для каждого символа строки s значение \0."

void ft_striter(char *s, void (*f)(char *));
Функция ft_striter применяет функцию f к каждому символу строки s, переданной в качестве аргумента. Каждый символ передается по адресу f для изменения, если это необходимо."

char *ft_strmapi(char const *s, char (*f)(unsigned int, char));
Функция ft_strmapi применяет функцию f к каждому символу строки s, переданной в качестве аргумента, указав ее индекс в качестве первого аргумента, чтобы создать «свежую» новую строку (с malloc), полученную в результате последовательного применения f."

Функция ft_strjoin выделяет (с помощью malloc) и возвращает «свежую» строку, заканчивающуюся на \0, в результате объединения s1 и s2. Если распределение завершается неудачно, функция возвращает NULL."
"char *ft_strtrim(char const *s);

Функция ft_strsplit выделяет (с помощью malloc) и возвращает массив «свежих» строк (все заканчивающиеся на \0, включая сам массив), полученных путем разбиения s с использованием символа c в качестве разделителя. Если распределение завершается неудачно, функция возвращает NULL. Например, ft_strsplit(""*hello*fellow***students*"", ’*’) вернёт [""hello"", ""fellow"", ""students""]."

int ft_atoi(const char *str);
Функция atoi конвертирует строку, на которую указывает параметр str, в величину типа int. Строка должна содержать корректную запись целого числа. В противном случае возвращается 0. Число может завершаться любым символом, который не может входить в состав строкового представления целого числа. Сюда относятся пробелы, знаки пунктуации и другие знаки, не являющиеся цифрами."

char *ft_itoa(int n);
Функция ft_itoa распределяет (с помощью malloc) и возвращает «свежую» строку, заканчивающуюся на \0, представляющую целое число n, заданное в качестве аргумента. Подерживаются отрицательные числа. Если распределение завершается неудачно, функция возвращает NULL."

int ft_isalpha(int c);
Функция isalpha возвращает ненулевое значение, если его аргумент c является буквой алфавита (верхнего или нижнего регистра). В противном случае возвращается 0."

int ft_isdigit(int c);
Функция isdigit возвращает ненулевое значение, если аргумент c является цифрой от 0 до 9, в противном случае возвращается 0."

int ft_isalnum(int c);
Функция isalnum возвращает ненулевое значение, если его аргумент является либо буквой алфавита (верхнего или нижнего регистра), либо цифрой. Если символ не является буквенно-цифровым, возвращается 0."

int ft_isascii(int c);
Функция isascii возвращает ненулевое значение, если значение c находится в пределах от 0 до 0x7F, в противном случае возвращается 0."

int ft_toupper(int c);
Функция toupper возвращает соответствующий верхнему регистру эквивалент символа c, если c — это буква. В противном случае c возвращается неизмененным."

int ft_tolower(int c);
Функция tolower возвращает соответствующий нижнему регистру эквивалент символа c, если c — это буква верхнего регистра. В противном случае c возвращается неизмененным."

void ft_putchar(char c);
Функция putchar выводит символ c на стандартный вывод."

void ft_putstr(char const *s);
Функция putstr выводит строку s на стандартный вывод."

void ft_putendl(char const *s);
Функция putendl выводит строку s с символом переноса строки \n на стандартный вывод."

void ft_putnbr(int n);
Функция putnbr выводит число n на стандартный вывод."

void ft_putchar_fd(char c, int fd);
Функция ft_putchar_fd выводит символ c в файловый дискриптор fd."

void ft_putstr_fd(char const *s, int fd);
Функция ft_putstr_fd выводит строку s в файловый дискриптор fd."

void ft_putendl_fd(char const *s, int fd);
Функция ft_putendl_fd выводит строку s с символом переноса строки \n в файловый дискриптор fd."

void ft_putnbr_fd(int n, int fd);
Функция ft_putnbr_fd выводит число n в файловый дискриптор fd."

t_list *ft_lstnew(void const *content, size_t content_size);
Функция ft_lstnew распределяет (с помощью malloc) и возвращает «новый» указатель на лист. Переменные content и content_size нового указателя инициализируются копией параметров функции. Если параметр имеет значение nul, содержимое переменной инициализируется как NULL, а переменная content_size инициализируется равным 0, даже если у параметра content_size другое значение. Переменная next инициализируется значением NULL. Если распределение завершается неудачно, функция возвращает NULL."

void ft_lstdelone(t_list **alst, void (*del)(void *, size_t));
Функция ft_lstdelone принимает в качестве параметра адрес указателя и освобождает память содержимого, используя функцию del, заданную в качестве параметра, а затем освобождает память с помощью free. Ссылка на next не должна быть освобождена ни при каких обстоятельствах. Наконец, указатель на только что освобожденный указатель должен быть установлен в NULL (очень похоже на функцию ft_memdel)."

void ft_lstdel(t_list **alst, void (*del)(void *, size_t));
Функция ft_lstdel принимает в качестве параметра адрес указателя и освобождает память этого листа и всех наследников этого листа, используя функции del и free. Наконец, указатель на только что освобожденный лист должен быть установлен в NULL (очень похоже на функцию ft_memdel)."

void ft_lstadd(t_list **alst, t_list *new);
Функция ft_lstadd добавляет лист new начало листа alst."

void ft_lstiter(t_list *lst, void (*f) (t_list *elem));
Функция ft_lstiter применяет функцию f к каждому листу списка ls."

t_list *ft_lstmap(t_list *lst, t_list *(*f) (t_list *elem));
Функция ft_lstmap перебирает список lst и применяет функцию f к каждому листу, чтобы создать «свежий» список (используя malloc), полученный в результате последовательного применения функции f. Если распределение завершается неудачно, функция возвращает NULL.